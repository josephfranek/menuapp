'use strict';

var _graphqlTools = require('graphql-tools');

var _index = require('../../src/index');

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _graphqlServerExpress = require('graphql-server-express');

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _neo4jDriver = require('neo4j-driver');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Simple Movie schema
var typeDefs = '\nscalar Time\n\ntype Department {\n  department_id: Int\n  name: String\n  employments: [Employment] @relation(name: "HAS_EMPLOYEE", direction: "OUT")\n}\n\ntype Employment {\n  employment_id: ID\n  absences: [Absence] @relation(name: "HAS_ABSENCE", direction: "OUT")\n  absencesByRange(from: Time, to: Time): [Absence] @cypher(statement: "MATCH (this)-[:HAS_ABSENCE]-(a:Absence) WITH a WHERE apoc.date.parse(a.from_date,\'x\') > {from} AND apoc.date.parse(a.to_date,\'x\') <  {to} RETURN a")\n}\n\ntype Absence {\n  absence_id: Int\n  from_date: String\n  to_date: String\n  due_to: [Condition] @relation(name: "DUE_TO", direction: "OUT")\n  due_to2: [Condition] @cypher(statement: "MATCH (this)-[:DUE_TO]-(c:Condition) RETURN c")\n} \n\ntype Condition {\n  condition_id: Int\n  name: String\n}\n\ntype Query {\n  departments(department_id: ID, from: Int, to: Int): [Department]\n}\n';

var resolvers = {
  // root entry point to GraphQL service
  Query: {
    // fetch movies by title substring
    departments: function departments(object, params, ctx, resolveInfo) {
      return (0, _index.neo4jgraphql)(object, params, ctx, resolveInfo);
    }
  }
};

var schema = (0, _graphqlTools.makeExecutableSchema)({
  typeDefs: typeDefs,
  resolvers: resolvers
});

var driver = void 0;

function context(headers, secrets) {

  if (!driver) {
    driver = _neo4jDriver.v1.driver(secrets.NEO4J_URI || "bolt://localhost:7687", _neo4jDriver.v1.auth.basic(secrets.NEO4J_USER || "neo4j", secrets.NEO4J_PASSWORD || "letmein"));
  }
  return { driver: driver,
    headers: headers };
}

var rootValue = {};

var PORT = 3000;
var server = (0, _express2.default)();

server.use('/graphql', _bodyParser2.default.json(), (0, _graphqlServerExpress.graphqlExpress)(function (request) {
  return {
    schema: schema,
    rootValue: rootValue,
    context: context(request.headers, process.env)
  };
}));

server.use('/graphiql', (0, _graphqlServerExpress.graphiqlExpress)({
  endpointURL: '/graphql',
  query: '{\n  \n}'
}));

server.listen(PORT, function () {
  console.log('GraphQL Server is now running on http://localhost:' + PORT + '/graphql');
  console.log('View GraphiQL at http://localhost:' + PORT + '/graphiql');
});
//# sourceMappingURL=employment_deparment_test.js.map