{"version":3,"sources":["../../../example/graphql-tools/movies.js"],"names":["typeDefs","resolvers","Query","Movie","object","params","ctx","resolveInfo","MoviesByYear","AllMovies","MovieById","GenresBySubstring","Books","schema","resolverValidationOptions","requireResolversForResolveType","augmentedSchema","driver","context","headers","secrets","NEO4J_URI","auth","basic","NEO4J_USER","NEO4J_PASSWORD","rootValue","PORT","server","use","json","request","process","env","endpointURL","query","listen","console","log"],"mappings":";;AAAA;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA;AACA,IAAMA,85DAAN;;AAgEA,IAAMC,YAAY;AAChB;AACAC,SAAO;AACL;AACAC,SAFK,iBAECC,MAFD,EAESC,MAFT,EAEiBC,GAFjB,EAEsBC,WAFtB,EAEmC;AACtC,aAAO,yBAAaH,MAAb,EAAqBC,MAArB,EAA6BC,GAA7B,EAAkCC,WAAlC,EAA+C,IAA/C,CAAP;AACD,KAJI;AAKLC,gBALK,wBAKQJ,MALR,EAKgBC,MALhB,EAKwBC,GALxB,EAK6BC,WAL7B,EAK0C;AAC7C,aAAO,yBAAaH,MAAb,EAAqBC,MAArB,EAA6BC,GAA7B,EAAkCC,WAAlC,EAA+C,IAA/C,CAAP;AACD,KAPI;AAQLE,aARK,qBAQKL,MARL,EAQaC,MARb,EAQqBC,GARrB,EAQ0BC,WAR1B,EAQuC;AAC1C,aAAO,yBAAaH,MAAb,EAAqBC,MAArB,EAA6BC,GAA7B,EAAkCC,WAAlC,EAA+C,IAA/C,CAAP;AACD,KAVI;AAWLG,aAXK,qBAWKN,MAXL,EAWaC,MAXb,EAWqBC,GAXrB,EAW0BC,WAX1B,EAWuC;AAC1C,aAAO,yBAAaH,MAAb,EAAqBC,MAArB,EAA6BC,GAA7B,EAAkCC,WAAlC,EAA+C,IAA/C,CAAP;AACD,KAbI;AAcLI,qBAdK,6BAcaP,MAdb,EAcqBC,MAdrB,EAc6BC,GAd7B,EAckCC,WAdlC,EAc+C;AAClD,aAAO,yBAAaH,MAAb,EAAqBC,MAArB,EAA6BC,GAA7B,EAAkCC,WAAlC,EAA+C,IAA/C,CAAP;AACD,KAhBI;AAiBLK,SAjBK,iBAiBCR,MAjBD,EAiBSC,MAjBT,EAiBiBC,GAjBjB,EAiBsBC,WAjBtB,EAiBmC;AACtC,aAAO,yBAAaH,MAAb,EAAqBC,MAArB,EAA6BC,GAA7B,EAAkCC,WAAlC,EAA+C,IAA/C,CAAP;AACD;AAnBI;AAFS,CAAlB;;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMM,SAAS,wCAAqB;AAClCb,oBADkC;AAElCC,sBAFkC;AAGlCa,6BAA2B;AACzBC,oCAAgC;AADP;AAHO,CAArB,CAAf;;AAQA;AACA,IAAMC,kBAAkB,0BAAcH,MAAd,CAAxB;;AAEA,IAAII,eAAJ;;AAEA,SAASC,OAAT,CAAiBC,OAAjB,EAA0BC,OAA1B,EAAmC;AACjC,MAAI,CAACH,MAAL,EAAa;AACXA,aAAS,gBAAMA,MAAN,CACPG,QAAQC,SAAR,IAAqB,uBADd,EAEP,gBAAMC,IAAN,CAAWC,KAAX,CACEH,QAAQI,UAAR,IAAsB,OADxB,EAEEJ,QAAQK,cAAR,IAA0B,SAF5B,CAFO,CAAT;AAOD;AACD,SAAO;AACLR,kBADK;AAELE;AAFK,GAAP;AAID;;AAED,IAAMO,YAAY,EAAlB;;AAEA,IAAMC,OAAO,IAAb;AACA,IAAMC,SAAS,wBAAf;;AAEAA,OAAOC,GAAP,CACE,UADF,EAEE,qBAAWC,IAAX,EAFF,EAGE,yCAAe;AAAA,SAAY;AACzBjB,YAAQG,eADiB;AAEzBU,wBAFyB;AAGzBR,aAASA,QAAQa,QAAQZ,OAAhB,EAAyBa,QAAQC,GAAjC;AAHgB,GAAZ;AAAA,CAAf,CAHF;;AAUAL,OAAOC,GAAP,CACE,WADF,EAEE,0CAAgB;AACdK,eAAa,UADC;AAEdC;AAFc,CAAhB,CAFF;;AAUAP,OAAOQ,MAAP,CAAcT,IAAd,EAAoB,YAAM;AACxBU,UAAQC,GAAR,wDACuDX,IADvD;AAGAU,UAAQC,GAAR,wCAAiDX,IAAjD;AACD,CALD","file":"movies.js","sourcesContent":["import { makeExecutableSchema } from 'graphql-tools';\nimport { neo4jgraphql, augmentSchema } from '../../src/index';\nimport express from 'express';\nimport { graphqlExpress, graphiqlExpress } from 'apollo-server-express';\nimport bodyParser from 'body-parser';\nimport { v1 as neo4j } from 'neo4j-driver';\n\n// Simple Movie schema\nconst typeDefs = `\ntype Movie {\n  movieId: ID!\n  title: String\n  year: Int\n  plot: String\n  poster: String\n  imdbRating: Float\n  genres: [Genre] @relation(name: \"IN_GENRE\", direction: \"OUT\")\n  similar(first: Int = 3, offset: Int = 0, limit: Int = 5): [Movie] @cypher(statement: \"WITH {this} AS this MATCH (this)--(:Genre)--(o:Movie) RETURN o LIMIT {limit}\")\n  mostSimilar: Movie @cypher(statement: \"WITH {this} AS this RETURN this\")\n  degree: Int @cypher(statement: \"WITH {this} AS this RETURN SIZE((this)--())\")\n  actors(first: Int = 3, offset: Int = 0): [Actor] @relation(name: \"ACTED_IN\", direction:\"IN\")\n  avgStars: Float\n  filmedIn: State @relation(name: \"FILMED_IN\", direction: \"OUT\")\n  scaleRating(scale: Int = 3): Float @cypher(statement: \"WITH $this AS this RETURN $scale * this.imdbRating\")\n  scaleRatingFloat(scale: Float = 1.5): Float @cypher(statement: \"WITH $this AS this RETURN $scale * this.imdbRating\")\n}\n\ntype Genre {\n  name: String\n  movies(first: Int = 3, offset: Int = 0): [Movie] @relation(name: \"IN_GENRE\", direction: \"IN\")\n  highestRatedMovie: Movie @cypher(statement: \"MATCH (m:Movie)-[:IN_GENRE]->(this) RETURN m ORDER BY m.imdbRating DESC LIMIT 1\")\n}\n\ntype State {\n  name: String\n}\n\ninterface Person {\n\tid: ID!\n  name: String\n}\n\ntype Actor {\n  id: ID!\n  name: String\n  movies: [Movie] @relation(name: \"ACTED_IN\", direction: \"OUT\")\n}\n\ntype User implements Person {\n  id: ID!\n\tname: String\n}\n\nenum BookGenre {\n  Mystery,\n  Science,\n  Math\n}\n\ntype Book {\n  genre: BookGenre\n}\n\ntype Query {\n  Movie(id: ID, title: String, year: Int, plot: String, poster: String, imdbRating: Float, first: Int, offset: Int): [Movie]\n  MoviesByYear(year: Int): [Movie]\n  AllMovies: [Movie]\n  MovieById(movieId: ID!): Movie\n  GenresBySubstring(substring: String): [Genre] @cypher(statement: \"MATCH (g:Genre) WHERE toLower(g.name) CONTAINS toLower($substring) RETURN g\")\n  Books: [Book]\n}`;\n\nconst resolvers = {\n  // root entry point to GraphQL service\n  Query: {\n    // fetch movies by title substring\n    Movie(object, params, ctx, resolveInfo) {\n      return neo4jgraphql(object, params, ctx, resolveInfo, true);\n    },\n    MoviesByYear(object, params, ctx, resolveInfo) {\n      return neo4jgraphql(object, params, ctx, resolveInfo, true);\n    },\n    AllMovies(object, params, ctx, resolveInfo) {\n      return neo4jgraphql(object, params, ctx, resolveInfo, true);\n    },\n    MovieById(object, params, ctx, resolveInfo) {\n      return neo4jgraphql(object, params, ctx, resolveInfo, true);\n    },\n    GenresBySubstring(object, params, ctx, resolveInfo) {\n      return neo4jgraphql(object, params, ctx, resolveInfo, true);\n    },\n    Books(object, params, ctx, resolveInfo) {\n      return neo4jgraphql(object, params, ctx, resolveInfo, true);\n    }\n  }\n};\n\n// Mutation: {\n//   CreateGenre(object, params, ctx, resolveInfo) {\n//     return neo4jgraphql(object, params, ctx, resolveInfo, true);\n//   },\n//   CreateMovie(object, params, ctx, resolveInfo) {\n//     return neo4jgraphql(object, params, ctx, resolveInfo, true);\n//   },\n//   AddMovieGenre(object, params, ctx, resolveInfo) {\n//     return neo4jgraphql(object, params, ctx, resolveInfo, true);\n//   }\n// }\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n  resolverValidationOptions: {\n    requireResolversForResolveType: false\n  }\n});\n\n// Add auto-generated mutations\nconst augmentedSchema = augmentSchema(schema);\n\nlet driver;\n\nfunction context(headers, secrets) {\n  if (!driver) {\n    driver = neo4j.driver(\n      secrets.NEO4J_URI || 'bolt://localhost:7687',\n      neo4j.auth.basic(\n        secrets.NEO4J_USER || 'neo4j',\n        secrets.NEO4J_PASSWORD || 'letmein'\n      )\n    );\n  }\n  return {\n    driver,\n    headers\n  };\n}\n\nconst rootValue = {};\n\nconst PORT = 3000;\nconst server = express();\n\nserver.use(\n  '/graphql',\n  bodyParser.json(),\n  graphqlExpress(request => ({\n    schema: augmentedSchema,\n    rootValue,\n    context: context(request.headers, process.env)\n  }))\n);\n\nserver.use(\n  '/graphiql',\n  graphiqlExpress({\n    endpointURL: '/graphql',\n    query: `{\n  \n}`\n  })\n);\n\nserver.listen(PORT, () => {\n  console.log(\n    `GraphQL Server is now running on http://localhost:${PORT}/graphql`\n  );\n  console.log(`View GraphiQL at http://localhost:${PORT}/graphiql`);\n});\n"]}