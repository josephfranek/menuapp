{"version":3,"sources":["../../../example/graphql-tools/employment_deparment_test.js"],"names":["typeDefs","resolvers","Query","departments","object","params","ctx","resolveInfo","schema","driver","context","headers","secrets","NEO4J_URI","auth","basic","NEO4J_USER","NEO4J_PASSWORD","rootValue","PORT","server","use","json","request","process","env","endpointURL","query","listen","console","log"],"mappings":";;AAAA;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAIA;AACA,IAAMA,k4BAAN;;AAiCA,IAAMC,YAAY;AAChB;AACAC,SAAO;AACL;AACAC,eAFK,uBAEOC,MAFP,EAEeC,MAFf,EAEuBC,GAFvB,EAE4BC,WAF5B,EAEyC;AAC5C,aAAO,yBAAaH,MAAb,EAAqBC,MAArB,EAA6BC,GAA7B,EAAkCC,WAAlC,CAAP;AACD;AAJI;AAFS,CAAlB;;AAWA,IAAMC,SAAS,wCAAqB;AAClCR,oBADkC;AAElCC;AAFkC,CAArB,CAAf;;AAKA,IAAIQ,eAAJ;;AAGA,SAASC,OAAT,CAAiBC,OAAjB,EAA0BC,OAA1B,EAAmC;;AAEjC,MAAI,CAACH,MAAL,EAAa;AACXA,aAAS,gBAAMA,MAAN,CAAaG,QAAQC,SAAR,IAAqB,uBAAlC,EAA2D,gBAAMC,IAAN,CAAWC,KAAX,CAAiBH,QAAQI,UAAR,IAAsB,OAAvC,EAAgDJ,QAAQK,cAAR,IAA0B,SAA1E,CAA3D,CAAT;AACD;AACD,SAAO,EAACR,cAAD;AACLE,oBADK,EAAP;AAED;;AAED,IAAMO,YAAY,EAAlB;;AAGA,IAAMC,OAAO,IAAb;AACA,IAAMC,SAAS,wBAAf;;AAEAA,OAAOC,GAAP,CAAW,UAAX,EAAuB,qBAAWC,IAAX,EAAvB,EAA0C,0CAAe;AAAA,SAAY;AACnEd,kBADmE;AAEnEU,wBAFmE;AAGnER,aAASA,QAAQa,QAAQZ,OAAhB,EAAyBa,QAAQC,GAAjC;AAH0D,GAAZ;AAAA,CAAf,CAA1C;;AAMAL,OAAOC,GAAP,CAAW,WAAX,EAAwB,2CAAgB;AACtCK,eAAa,UADyB;AAEtCC;AAFsC,CAAhB,CAAxB;;AAOAP,OAAOQ,MAAP,CAAcT,IAAd,EAAoB,YAAM;AACxBU,UAAQC,GAAR,wDAAiEX,IAAjE;AACAU,UAAQC,GAAR,wCAAiDX,IAAjD;AACD,CAHD","file":"employment_deparment_test.js","sourcesContent":["import { makeExecutableSchema } from 'graphql-tools';\nimport {neo4jgraphql} from '../../src/index';\nimport express from 'express';\nimport { graphqlExpress, graphiqlExpress } from 'graphql-server-express';\nimport bodyParser from 'body-parser';\nimport {v1 as neo4j} from 'neo4j-driver';\n\n\n\n// Simple Movie schema\nconst typeDefs = `\nscalar Time\n\ntype Department {\n  department_id: Int\n  name: String\n  employments: [Employment] @relation(name: \"HAS_EMPLOYEE\", direction: \"OUT\")\n}\n\ntype Employment {\n  employment_id: ID\n  absences: [Absence] @relation(name: \"HAS_ABSENCE\", direction: \"OUT\")\n  absencesByRange(from: Time, to: Time): [Absence] @cypher(statement: \"MATCH (this)-[:HAS_ABSENCE]-(a:Absence) WITH a WHERE apoc.date.parse(a.from_date,'x') > {from} AND apoc.date.parse(a.to_date,'x') <  {to} RETURN a\")\n}\n\ntype Absence {\n  absence_id: Int\n  from_date: String\n  to_date: String\n  due_to: [Condition] @relation(name: \"DUE_TO\", direction: \"OUT\")\n  due_to2: [Condition] @cypher(statement: \"MATCH (this)-[:DUE_TO]-(c:Condition) RETURN c\")\n} \n\ntype Condition {\n  condition_id: Int\n  name: String\n}\n\ntype Query {\n  departments(department_id: ID, from: Int, to: Int): [Department]\n}\n`;\n\nconst resolvers = {\n  // root entry point to GraphQL service\n  Query: {\n    // fetch movies by title substring\n    departments(object, params, ctx, resolveInfo) {\n      return neo4jgraphql(object, params, ctx, resolveInfo);\n    }\n  }\n};\n\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n});\n\nlet driver;\n\n\nfunction context(headers, secrets) {\n\n  if (!driver) {\n    driver = neo4j.driver(secrets.NEO4J_URI || \"bolt://localhost:7687\", neo4j.auth.basic(secrets.NEO4J_USER || \"neo4j\", secrets.NEO4J_PASSWORD || \"letmein\"))\n  }\n  return {driver,\n    headers};\n}\n\nconst rootValue = {};\n\n\nconst PORT = 3000;\nconst server = express();\n\nserver.use('/graphql', bodyParser.json(), graphqlExpress(request => ({\n  schema,\n  rootValue,\n  context: context(request.headers, process.env),\n})));\n\nserver.use('/graphiql', graphiqlExpress({\n  endpointURL: '/graphql',\n  query: `{\n  \n}`,\n}));\n\nserver.listen(PORT, () => {\n  console.log(`GraphQL Server is now running on http://localhost:${PORT}/graphql`);\n  console.log(`View GraphiQL at http://localhost:${PORT}/graphiql`);\n});"]}