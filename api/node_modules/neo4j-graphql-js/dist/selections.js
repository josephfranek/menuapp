'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _toArray2 = require('babel-runtime/helpers/toArray');

var _toArray3 = _interopRequireDefault(_toArray2);

exports.buildCypherSelection = buildCypherSelection;

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function buildCypherSelection(_ref) {
  var initial = _ref.initial,
      selections = _ref.selections,
      variableName = _ref.variableName,
      schemaType = _ref.schemaType,
      resolveInfo = _ref.resolveInfo;

  if (!selections.length) {
    return initial;
  }

  var _selections = (0, _toArray3.default)(selections),
      headSelection = _selections[0],
      tailSelections = _selections.slice(1);

  var tailParams = {
    selections: tailSelections,
    variableName: variableName,
    schemaType: schemaType,
    resolveInfo: resolveInfo
  };

  var fieldName = headSelection.name.value;
  var commaIfTail = tailSelections.length > 0 ? ',' : '';

  // Schema meta fields(__schema, __typename, etc)
  if (!schemaType.getFields()[fieldName]) {
    return buildCypherSelection((0, _extends3.default)({
      initial: tailSelections.length ? initial : initial.substring(0, initial.lastIndexOf(','))
    }, tailParams));
  }

  var fieldType = schemaType.getFields()[fieldName].type;
  var innerSchemaType = (0, _utils.innerType)(fieldType); // for target "type" aka label

  var _cypherDirective = (0, _utils.cypherDirective)(schemaType, fieldName),
      customCypher = _cypherDirective.statement;

  // Database meta fields(_id)


  if (fieldName === '_id') {
    return buildCypherSelection((0, _extends3.default)({
      initial: '' + initial + fieldName + ': ID(' + variableName + ')' + commaIfTail
    }, tailParams));
  }

  // Main control flow
  if ((0, _utils.isGraphqlScalarType)(innerSchemaType)) {
    if (customCypher) {
      return buildCypherSelection((0, _extends3.default)({
        initial: '' + initial + fieldName + ': apoc.cypher.runFirstColumn("' + customCypher + '", ' + (0, _utils.cypherDirectiveArgs)(variableName, headSelection, schemaType, resolveInfo) + ', false)' + commaIfTail
      }, tailParams));
    }

    // graphql scalar type, no custom cypher statement
    return buildCypherSelection((0, _extends3.default)({
      initial: initial + ' .' + fieldName + ' ' + commaIfTail
    }, tailParams));
  }

  // We have a graphql object type

  var nestedVariable = variableName + '_' + fieldName;
  var skipLimit = (0, _utils.computeSkipLimit)(headSelection, resolveInfo.variableValues);

  var nestedParams = {
    initial: '',
    selections: headSelection.selectionSet.selections,
    variableName: nestedVariable,
    schemaType: innerSchemaType,
    resolveInfo: resolveInfo
  };

  if (customCypher) {
    // similar: [ x IN apoc.cypher.runFirstColumn("WITH {this} AS this MATCH (this)--(:Genre)--(o:Movie) RETURN o", {this: movie}, true) |x {.title}][1..2])
    var fieldIsList = !!fieldType.ofType;

    return buildCypherSelection((0, _extends3.default)({
      initial: '' + initial + fieldName + ': ' + (fieldIsList ? '' : 'head(') + '[ ' + nestedVariable + ' IN apoc.cypher.runFirstColumn("' + customCypher + '", ' + (0, _utils.cypherDirectiveArgs)(variableName, headSelection, schemaType, resolveInfo) + ', true) | ' + nestedVariable + ' {' + buildCypherSelection((0, _extends3.default)({}, nestedParams)) + '}]' + (fieldIsList ? '' : ')') + skipLimit + ' ' + commaIfTail
    }, tailParams));
  }

  // graphql object type, no custom cypher

  var _relationDirective = (0, _utils.relationDirective)(schemaType, fieldName),
      relType = _relationDirective.name,
      relDirection = _relationDirective.direction;

  var queryParams = (0, _utils.innerFilterParams)(selections);

  return buildCypherSelection((0, _extends3.default)({
    initial: '' + initial + fieldName + ': ' + (!(0, _utils.isArrayType)(fieldType) ? 'head(' : '') + '[(' + variableName + ')' + (relDirection === 'in' || relDirection === 'IN' ? '<' : '') + '-[:' + relType + ']-' + (relDirection === 'out' || relDirection === 'OUT' ? '>' : '') + '(' + nestedVariable + ':' + innerSchemaType.name + queryParams + ') | ' + nestedVariable + ' {' + buildCypherSelection((0, _extends3.default)({}, nestedParams)) + '}]' + (!(0, _utils.isArrayType)(fieldType) ? ')' : '') + skipLimit + ' ' + commaIfTail
  }, tailParams));
}