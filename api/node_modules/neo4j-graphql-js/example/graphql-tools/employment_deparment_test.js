import { makeExecutableSchema } from 'graphql-tools';
import {neo4jgraphql} from '../../src/index';
import express from 'express';
import { graphqlExpress, graphiqlExpress } from 'graphql-server-express';
import bodyParser from 'body-parser';
import {v1 as neo4j} from 'neo4j-driver';



// Simple Movie schema
const typeDefs = `
scalar Time

type Department {
  department_id: Int
  name: String
  employments: [Employment] @relation(name: "HAS_EMPLOYEE", direction: "OUT")
}

type Employment {
  employment_id: ID
  absences: [Absence] @relation(name: "HAS_ABSENCE", direction: "OUT")
  absencesByRange(from: Time, to: Time): [Absence] @cypher(statement: "MATCH (this)-[:HAS_ABSENCE]-(a:Absence) WITH a WHERE apoc.date.parse(a.from_date,'x') > {from} AND apoc.date.parse(a.to_date,'x') <  {to} RETURN a")
}

type Absence {
  absence_id: Int
  from_date: String
  to_date: String
  due_to: [Condition] @relation(name: "DUE_TO", direction: "OUT")
  due_to2: [Condition] @cypher(statement: "MATCH (this)-[:DUE_TO]-(c:Condition) RETURN c")
} 

type Condition {
  condition_id: Int
  name: String
}

type Query {
  departments(department_id: ID, from: Int, to: Int): [Department]
}
`;

const resolvers = {
  // root entry point to GraphQL service
  Query: {
    // fetch movies by title substring
    departments(object, params, ctx, resolveInfo) {
      return neo4jgraphql(object, params, ctx, resolveInfo);
    }
  }
};


const schema = makeExecutableSchema({
  typeDefs,
  resolvers,
});

let driver;


function context(headers, secrets) {

  if (!driver) {
    driver = neo4j.driver(secrets.NEO4J_URI || "bolt://localhost:7687", neo4j.auth.basic(secrets.NEO4J_USER || "neo4j", secrets.NEO4J_PASSWORD || "letmein"))
  }
  return {driver,
    headers};
}

const rootValue = {};


const PORT = 3000;
const server = express();

server.use('/graphql', bodyParser.json(), graphqlExpress(request => ({
  schema,
  rootValue,
  context: context(request.headers, process.env),
})));

server.use('/graphiql', graphiqlExpress({
  endpointURL: '/graphql',
  query: `{
  
}`,
}));

server.listen(PORT, () => {
  console.log(`GraphQL Server is now running on http://localhost:${PORT}/graphql`);
  console.log(`View GraphiQL at http://localhost:${PORT}/graphiql`);
});