  type Movie {
      movieId: ID!
      title: String
      year: Int
      plot: String
      poster: String
      imdbRating: Float
      genres: [String]
      similar(first: Int = 3, offset: Int = 0): [Movie] @cypher(statement: "MATCH (this)--(:Genre)--(o:Movie) RETURN o")
      degree: Int @cypher(statement: "RETURN SIZE((this)--())")
      actors(first: Int = 3, offset: Int = 0): [Actor] @relation(name: "ACTED_IN", direction:"IN")
      avgStars: Float
      filmedIn: State @relation(name: "FILMED_IN", direction: "OUT")
  }

type State {
    name: String
}

type Actor {
    id: ID!
    name: String
    movies: [Movie] @relation(name: "ACTED_IN", direction: "OUT")
}

type User {
    id: ID!
    name: String
}

type Query {
    Movie(id: ID, title: String, year: Int, plot: String, poster: String, imdbRating: Float, first: Int, offset: Int): [Movie]
    MoviesByYear(year: Int): [Movie]
    AllMovies: [Movie]
    MovieById(movieId: ID!): Movie
}



